// -------------------------------------------------------------
// 
// File Name: D:\КЕОА\3 курс\Апараткі\Лаба №2\Lab2_1(second try)\Lab2_1\CALC_MAGNITUDE_AND_PHASE_FIXED_POINT_tb.v
// Created: 2023-01-24 19:19:29
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// O_MAGNITUDE                   ce_out        1
// O_PHASE                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CALC_MAGNITUDE_AND_PHASE_FIXED_POINT_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CALC_MAGNITUDE_AND_PHASE_FIXED_POINT_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire O_PHASE_done;  // ufix1
  wire rdEnb;
  wire O_PHASE_done_enb;  // ufix1
  reg [3:0] O_MAGNITUDE_addr;  // ufix4
  wire O_PHASE_lastAddr;  // ufix1
  wire resetn;
  reg  check2_done;  // ufix1
  wire O_MAGNITUDE_done;  // ufix1
  wire O_MAGNITUDE_done_enb;  // ufix1
  wire O_MAGNITUDE_active;  // ufix1
  wire [3:0] Complex_Value_Fixed_addr_delay;  // ufix4
  reg  tb_enb_delay;
  reg signed [31:0] fp_I_COMPLEX_VALUE_im;  // sfix32
  reg [31:0] rawData_I_COMPLEX_VALUE_im;  // ufix32_En12
  reg signed [31:0] status_I_COMPLEX_VALUE_im;  // sfix32
  reg [31:0] holdData_I_COMPLEX_VALUE_im;  // ufix32_En12
  reg [31:0] I_COMPLEX_VALUE_im_offset;  // ufix32_En12
  wire [31:0] I_COMPLEX_VALUE_im;  // ufix32_En12
  reg [3:0] Complex_Value_Fixed_addr;  // ufix4
  wire Complex_Value_Fixed_active;  // ufix1
  wire Complex_Value_Fixed_enb;  // ufix1
  reg signed [31:0] fp_I_COMPLEX_VALUE_re;  // sfix32
  reg [31:0] rawData_I_COMPLEX_VALUE_re;  // ufix32_En12
  reg signed [31:0] status_I_COMPLEX_VALUE_re;  // sfix32
  reg [31:0] holdData_I_COMPLEX_VALUE_re;  // ufix32_En12
  reg [31:0] I_COMPLEX_VALUE_re_offset;  // ufix32_En12
  wire [31:0] I_COMPLEX_VALUE_re;  // ufix32_En12
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  wire ce_out;
  wire [32:0] O_MAGNITUDE;  // ufix33_En12
  wire [15:0] O_PHASE;  // ufix16_En13
  wire O_MAGNITUDE_enb;  // ufix1
  wire O_MAGNITUDE_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [32:0] O_MAGNITUDE_expected_1;  // ufix33_En12
  wire [32:0] O_MAGNITUDE_ref;  // ufix33_En12
  reg  O_MAGNITUDE_testFailure;  // ufix1
  wire [15:0] O_PHASE_expected_1;  // ufix16_En13
  wire [15:0] O_PHASE_ref;  // ufix16_En13
  reg  O_PHASE_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign O_PHASE_done_enb = O_PHASE_done & rdEnb;



  assign O_PHASE_lastAddr = O_MAGNITUDE_addr >= 4'b1010;



  assign O_PHASE_done = O_PHASE_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (O_PHASE_done_enb) begin
          check2_done <= O_PHASE_done;
        end
      end
    end

  assign O_MAGNITUDE_done_enb = O_MAGNITUDE_done & rdEnb;



  assign O_MAGNITUDE_active = O_MAGNITUDE_addr != 4'b1010;



  // Data source for I_COMPLEX_VALUE_im
  initial
    begin : I_COMPLEX_VALUE_im_fileread
      fp_I_COMPLEX_VALUE_im = $fopen("I_COMPLEX_VALUE_im.dat", "r");
      status_I_COMPLEX_VALUE_im = $rewind(fp_I_COMPLEX_VALUE_im);
    end

  always @(Complex_Value_Fixed_addr_delay, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_COMPLEX_VALUE_im <= 32'bx;
      end
      else if (rdEnb == 1) begin
        status_I_COMPLEX_VALUE_im = $fscanf(fp_I_COMPLEX_VALUE_im, "%h", rawData_I_COMPLEX_VALUE_im);
      end
    end

  // holdData reg for Complex_Value_Fixed
  always @(posedge clk or posedge reset)
    begin : stimuli_Complex_Value_Fixed
      if (reset) begin
        holdData_I_COMPLEX_VALUE_im <= 32'bx;
      end
      else begin
        holdData_I_COMPLEX_VALUE_im <= rawData_I_COMPLEX_VALUE_im;
      end
    end

  always @(rawData_I_COMPLEX_VALUE_im or rdEnb)
    begin : stimuli_Complex_Value_Fixed_1
      if (rdEnb == 1'b0) begin
        I_COMPLEX_VALUE_im_offset <= holdData_I_COMPLEX_VALUE_im;
      end
      else begin
        I_COMPLEX_VALUE_im_offset <= rawData_I_COMPLEX_VALUE_im;
      end
    end

  assign #2 I_COMPLEX_VALUE_im = I_COMPLEX_VALUE_im_offset;

  assign Complex_Value_Fixed_active = Complex_Value_Fixed_addr != 4'b1010;



  assign Complex_Value_Fixed_enb = Complex_Value_Fixed_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10
  always @(posedge clk or posedge reset)
    begin : DataTypeConversion_process
      if (reset == 1'b1) begin
        Complex_Value_Fixed_addr <= 4'b0000;
      end
      else begin
        if (Complex_Value_Fixed_enb) begin
          if (Complex_Value_Fixed_addr >= 4'b1010) begin
            Complex_Value_Fixed_addr <= 4'b0000;
          end
          else begin
            Complex_Value_Fixed_addr <= Complex_Value_Fixed_addr + 4'b0001;
          end
        end
      end
    end



  assign #1 Complex_Value_Fixed_addr_delay = Complex_Value_Fixed_addr;

  // Data source for I_COMPLEX_VALUE_re
  initial
    begin : I_COMPLEX_VALUE_re_fileread
      fp_I_COMPLEX_VALUE_re = $fopen("I_COMPLEX_VALUE_re.dat", "r");
      status_I_COMPLEX_VALUE_re = $rewind(fp_I_COMPLEX_VALUE_re);
    end

  always @(Complex_Value_Fixed_addr_delay, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_I_COMPLEX_VALUE_re <= 32'bx;
      end
      else if (rdEnb == 1) begin
        status_I_COMPLEX_VALUE_re = $fscanf(fp_I_COMPLEX_VALUE_re, "%h", rawData_I_COMPLEX_VALUE_re);
      end
    end

  // holdData reg for Complex_Value_Fixed
  always @(posedge clk or posedge reset)
    begin : stimuli_Complex_Value_Fixed_2
      if (reset) begin
        holdData_I_COMPLEX_VALUE_re <= 32'bx;
      end
      else begin
        holdData_I_COMPLEX_VALUE_re <= rawData_I_COMPLEX_VALUE_re;
      end
    end

  always @(rawData_I_COMPLEX_VALUE_re or rdEnb)
    begin : stimuli_Complex_Value_Fixed_3
      if (rdEnb == 1'b0) begin
        I_COMPLEX_VALUE_re_offset <= holdData_I_COMPLEX_VALUE_re;
      end
      else begin
        I_COMPLEX_VALUE_re_offset <= rawData_I_COMPLEX_VALUE_re;
      end
    end

  assign #2 I_COMPLEX_VALUE_re = I_COMPLEX_VALUE_re_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (snkDone == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  CALC_MAGNITUDE_AND_PHASE_FIXED_POINT u_CALC_MAGNITUDE_AND_PHASE_FIXED_POINT (.clk(clk),
                                                                               .reset(reset),
                                                                               .clk_enable(clk_enable),
                                                                               .I_COMPLEX_VALUE_re(I_COMPLEX_VALUE_re),  // ufix32_En12
                                                                               .I_COMPLEX_VALUE_im(I_COMPLEX_VALUE_im),  // ufix32_En12
                                                                               .ce_out(ce_out),
                                                                               .O_MAGNITUDE(O_MAGNITUDE),  // ufix33_En12
                                                                               .O_PHASE(O_PHASE)  // ufix16_En13
                                                                               );

  assign O_MAGNITUDE_enb = ce_out & O_MAGNITUDE_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        O_MAGNITUDE_addr <= 4'b0000;
      end
      else begin
        if (O_MAGNITUDE_enb) begin
          if (O_MAGNITUDE_addr >= 4'b1010) begin
            O_MAGNITUDE_addr <= 4'b0000;
          end
          else begin
            O_MAGNITUDE_addr <= O_MAGNITUDE_addr + 4'b0001;
          end
        end
      end
    end



  assign O_MAGNITUDE_lastAddr = O_MAGNITUDE_addr >= 4'b1010;



  assign O_MAGNITUDE_done = O_MAGNITUDE_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (O_MAGNITUDE_done_enb) begin
          check1_done <= O_MAGNITUDE_done;
        end
      end
    end

  assign snkDone = check1_done & check2_done;



  // Data source for O_MAGNITUDE_expected
  assign O_MAGNITUDE_expected_1 = 33'h000000000;



  assign O_MAGNITUDE_ref = O_MAGNITUDE_expected_1;

  always @(posedge clk or posedge reset)
    begin : O_MAGNITUDE_checker
      if (reset == 1'b1) begin
        O_MAGNITUDE_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && O_MAGNITUDE !== O_MAGNITUDE_ref) begin
          O_MAGNITUDE_testFailure <= 1'b1;
          $display("ERROR in O_MAGNITUDE at time %t : Expected '%h' Actual '%h'", $time, O_MAGNITUDE_ref, O_MAGNITUDE);
        end
      end
    end

  // Data source for O_PHASE_expected
  assign O_PHASE_expected_1 = 16'b0000000000000000;



  assign O_PHASE_ref = O_PHASE_expected_1;

  always @(posedge clk or posedge reset)
    begin : O_PHASE_checker
      if (reset == 1'b1) begin
        O_PHASE_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && O_PHASE !== O_PHASE_ref) begin
          O_PHASE_testFailure <= 1'b1;
          $display("ERROR in O_PHASE at time %t : Expected '%h' Actual '%h'", $time, O_PHASE_ref, O_PHASE);
        end
      end
    end

  assign testFailure = O_MAGNITUDE_testFailure | O_PHASE_testFailure;



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // CALC_MAGNITUDE_AND_PHASE_FIXED_POINT_tb

